import pandas as pd
import numpy as np
import re
import nltk
import seaborn as sns
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

nltk.download('stopwords')
nltk.download('punkt')

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

df = pd.read_csv("news.csv")
print(df.info(), df)

df.dropna(subset=['text', 'label'], inplace=True)
df['label'] = df['label'].map({'Fake': 0, 'Real': 1})

def preprocess_text(text):
    text = re.sub(r'\W', ' ', text.lower())
    return ' '.join([word for word in word_tokenize(text) if word not in set(stopwords.words('english'))])

df['clean_text'] = df['text'].apply(preprocess_text)

X = TfidfVectorizer(max_features=5000).fit_transform(df['clean_text']).toarray()
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

model = LogisticRegression(class_weight='balanced').fit(X_train, y_train)
y_pred = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_pred)
fake_acc, real_acc = conf_matrix[0, 0] / sum(conf_matrix[0]), conf_matrix[1, 1] / sum(conf_matrix[1])

print(f"Overall Accuracy: {accuracy_score(y_test, y_pred) * 100:.2f}%")
print(f"Fake News Accuracy: {fake_acc * 100:.2f}%")
print(f"Real News Accuracy: {real_acc * 100:.2f}%")

sns.countplot(x='label', data=df, palette='coolwarm')
plt.xticks([0, 1], ['Fake News', 'Real News'])
plt.title("Distribution of Fake and Real News in the Dataset")
plt.show()

def classify_news(news_text):
    vectorized_text = TfidfVectorizer(max_features=5000).fit(df['clean_text']).transform([preprocess_text(news_text)]).toarray()
    prediction = model.predict(vectorized_text)[0]
    return ("Real" if prediction == 1 else "Fake"), (real_acc if prediction == 1 else fake_acc)

while True:
    news = input("\nEnter the news article (type 'exit' to stop): ")
    if news.strip().lower() == 'exit':
        print("\nExiting the program. Goodbye!")
        break
    elif not news.strip():
        print("\n Please enter a valid news article!")
        continue
    
    result, accuracy = classify_news(news)
    print(f"\nPrediction: The news is {result} with {accuracy * 100:.2f}% accuracy.\n")
